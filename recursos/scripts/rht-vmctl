#!/bin/bash
# Based on anontymous "rht-vmctl" script overview
# Modifications: Ricardo David Carrillo Sanchez
action=$(echo $1| tr "[[:upper:]]" "[[:lower:]]")
machinet=$(echo $2| tr "[[:upper:]]" "[[:lower:]]")
templates="/home/ricardo.carrillo/Virtual_Machines/"
xml_path="/etc/libvirt/qemu/"
xml_storage="/etc/libvirt/storage/"
xml_tpl_ss="${xml_path}rhcsa-plantilla-server.xml"
xml_tpl_sd="${xml_path}rhcsa-plantilla-desktop.xml"
xml_tpl_rh="${xml_path}rhcsa-plantilla-random.xml"
xml_tpl_sg="${xml_path}rhcsa-plantilla-guest.xml"
nameServerTPL="rhcsa-plantilla-random"
nameServerSRV="rh124-plantilla-servidor"
ndestktop="desktop.example.com"
nserver="server.example.com"
nguest="guest.example.com"
LOG="/tmp/log"
w="\e[97m"
r="\e[91m"
y="\e[93m"
g="\e[32m"
c="\e[36m"
d="\e[m"
u="\e[4m"
function resetDeskTop {
<<<<<<< HEAD
		cd $templates && rm -f ${templates}rh124-desktop-snap.ovl && rm -f ${xml_path}rh124-plantilla-desktop.xml \
			&& virsh undefine $ndestktop >>$LOG&& virsh destroy $ndestktop >>$LOG
			cp -vap ${xml_tpl_sd} ${xml_path}rh124-plantilla-desktop.xml >>$LOG \
			&& sed -i -e "s/rhcsa-plantilla-desktop/desktop\.example\.com/g" ${xml_path}rh124-plantilla-desktop.xml \
			&& sed -i -e "s/d0670c2a-a7f3-4b54-b3ab-7a1180053717/$(uuidgen)/g" ${xml_path}rh124-plantilla-desktop.xml \
			&& sed -i -e "s/desktop.qcow2/rh124-desktop-snap\.ovl/g" ${xml_path}rh124-plantilla-desktop.xml
			cd $templates &&	qemu-img create -f qcow2 -b ${templates}/desktop.qcow2 ${templates}rh124-desktop-snap.ovl >> $LOG \
			&& virsh define ${xml_path}rh124-plantilla-desktop.xml 2>> $LOG && virsh start --domain $ndestktop 2>> $LOG
			viewDesktop
}

function resetServer {
	cd $templates && rm -f ${templates}/rh124-server-snap.ovl && rm -f ${xml_path}rh124-plantilla-server.xml \
	&& virsh undefine $nserver 2>> $LOG && virsh destroy $nserver 2>> $LOG
	cp -vap ${xml_tpl_ss} ${xml_path}rh124-plantilla-server.xml >> $LOG\
	&& sed -i -e "s/rhcsa-plantilla-server/server\.example\.com/g" ${xml_path}rh124-plantilla-server.xml \
=======
	cd $templates && rm -f ${templates}rh124-desktop-snap.ovl && rm -f ${xml_path}rh124-plantilla-desktop.xml \
	&& virsh undefine $ndestktop >>$LOG&& virsh destroy $ndestktop >>$LOG
	cp -vap ${xml_tpl_sd} ${xml_path}rh124-plantilla-desktop.xml >>$LOG \
	&& sed -i -e "s/rh124-plantilla-cliente/desktop\.example\.com/g" ${xml_path}rh124-plantilla-desktop.xml \
	&& sed -i -e "s/d0670c2a-a7f3-4b54-b3ab-7a1180053717/$(uuidgen)/g" ${xml_path}rh124-plantilla-desktop.xml \
	&& sed -i -e "s/desktop.qcow2/rh124-desktop-snap\.ovl/g" ${xml_path}rh124-plantilla-desktop.xml
	cd $templates && qemu-img create -f qcow2 -b ${templates}desktop.qcow2 ${templates}rh124-desktop-snap.ovl >> $LOG \
	&& virsh define ${xml_path}rh124-plantilla-desktop.xml 2>> $LOG && virsh start --domain $ndestktop 2>> $LOG
	viewDesktop
}

function resetServer {
	cd $templates && rm -f ${templates}rh124-server-snap.ovl && rm -f ${xml_path}rh124-plantilla-server.xml \
	virsh undefine $nserver 2>> $LOG && virsh destroy $nserver 2>> $LOG
	cp -p ${xml_tpl_ss} ${xml_path}rh124-plantilla-server.xml >> $LOG \
	&& sed -i -e "s/rh124-plantilla-servidor/server\.example\.com/g" ${xml_path}rh124-plantilla-server.xml \
>>>>>>> 58e3c459d6b61cd6ea8ab562c3f5050203d648d6
	&& sed -i -e "s/be01ea9c-3284-4978-95a7-2bc71ad94107/$(uuidgen)/g" ${xml_path}rh124-plantilla-server.xml \
	&& sed -i -e "s/server.qcow2/rh124-server-snap\.ovl/g" ${xml_path}rh124-plantilla-server.xml &&  cd $templates
	qemu-img create -f qcow2 -b ${templates}server.qcow2 ${templates}rh124-server-snap.ovl >> $LOG
	virsh define ${xml_path}rh124-plantilla-server.xml 2>> $LOG&& virsh start --domain $nserver 2>> $LOG
	viewServer
}

function resetGuest {
	cd $templates && rm -f ${templates}/rh124-guest-snap.ovl && rm -f ${xml_path}rh124-plantilla-guest.xml \
	&& virsh undefine $nguest 2>> $LOG && virsh destroy $nguest 2>> $LOG
	cp -vap ${xml_tpl_sg} ${xml_path}rh124-plantilla-guest.xml >> $LOG\
	&& sed -i -e "s/rhcsa-plantilla-guest/guest\.example\.com/g" ${xml_path}rh124-plantilla-guest.xml \
	&& sed -i -e "s/9d49d447-a8b3-4f0e-8819-c011599a3f62/$(uuidgen)/g" ${xml_path}rh124-plantilla-guest.xml \
	&& sed -i -e "s/guest.qcow2/rh124-guest-snap\.ovl/g" ${xml_path}rh124-plantilla-guest.xml
	cd $templates && qemu-img create -f qcow2 -b ${templates}guest.qcow2 ${templates}rh124-guest-snap.ovl >> $LOG\
	&& virsh define ${xml_path}rh124-plantilla-guest.xml 2>> $LOG&& virsh start --domain $nguest 2>> $LOG
	viewGuest
}

function createNewServer {
	rdnid=$(uuidgen) && uuid=$(echo $rdnid|cut -b 1-6)
	nameMachXML="rhcsa-${uuid}.xml"
	nameServer="rhcsa-${uuid}.example.com"
	cd $templates && virt-clone --original ${nameServerTPL} --name ${nameServer} --auto-clone --check path_in_use=off && virsh start --domain ${nameServer} 2>>$LOG
	#sleep 20 && echo -e "${w}Maquina:${d} ${y}${nameServer}${d} ${w}cuenta con IP:${d} ${g}$(detectIP)${d}" && viewRandom ${nameServer}
}

function detectIP(){
	nameserver=$1
	if [ ! -z "$uuid" ] ; then
		for i in $(sudo virsh net-dhcp-leases default | awk '{print $5}' | egrep -v "(^$|Pro)" | awk -F"/" '{print $1}') ; do
			getIP=$(ping -c1 $i -W1 | egrep -B1 " 0% packet loss"|awk '{print $2}' | grep -v packets)
			echo $getIP
		done
	fi
}

function viewGuest(){
	nomDomainS=$(virsh list --all | egrep -i  -e "$nguest" | awk '{print $3}')
	if [[ "$nomDomainS" = "apagado" ]] ; then
		virsh start $(echo $nguest) 2>>$LOG && virt-viewer --domain-name $nguest 2>/dev/null &
	else
		virt-viewer --domain-name $nguest 2>/dev/null >>$LOG &
	fi
}

function viewServer(){
	nomDomainS=$(virsh list --all | egrep -i -e "$nserver" | awk '{print $3}')
	if [[ "$nomDomainS" = "apagado" ]] ; then
		virsh start $(echo $nserver) >>$LOG && virt-viewer --domain-name $nserver 2>/dev/null >> $LOG &
	else
		virt-viewer --domain-name $nserver 2>/dev/null >> $LOG &
	fi
}

function viewDesktop(){
	nomDomainS=$(virsh list --all | egrep -i -e "$ndestktop" | awk '{print $3}')
	if [[ "$nomDomainS" = "apagado" ]] ; then
		virsh start $(echo $ndestktop) >>$LOG && virt-viewer --domain-name $ndestktop 2>/dev/null >> $LOG &
	else
		virt-viewer --domain-name $ndestktop 2>/dev/null >> $LOG &
	fi
}

function viewRandom(){
	nomDomainS=$(virsh list --all | egrep -i -e "$1" | awk '{print $3}')
	if [ ! -z $1 ] ; then
		if [[ "$nomDomainS" == "apagado" ]] ; then
			virsh start $(echo $1) >>$LOG && virt-viewer --domain-name $1 2>/dev/null >> $LOG &
		else
			virt-viewer --domain-name $1 2>/dev/null >> $LOG &
		fi
	fi
}

function  helpCmd {
	#echo -e "${w}Usage: ${y}$(basename $0)${d} ${r}[${c}new${d}${r}] | [${d}${g}addDisk${d}${r}|${d}${g}reset${d}${r}|${g}view ${r}${w}${u}desktop${d}${r}|${w}${u}server${d}${r}|${w}${u}guest${d}${r}|${w}${u}all${d}${r}]${d}"
	echo -e "${w}Usage: ${y}$(basename $0)${d} ${r}[${c}new${d}${r}] | [${d}${g}add-disk${d}${r}|${d}${g}reset${d}${r}|${g}view ${r}${w}${u}desktop${d}${r}|${w}${u}server${d}${r}|${w}${u}guest${d}${r}|${w}${u}all${d}${r}]${d}"

}

function helpOption {
	arg=$(echo $1|tr "[:upper:]" "[:lower:]")
	if [ ! -z $1 ] ; then
		case $arg in
			reset|view)
				response="${w}Usage: ${y}$(basename $0)${d} ${g}${arg}${d} ${w}${u}desktop${d}${r}|${d}${w}${u}server${d}${r}|${d}${w}${u}guest${d}"
				;;
				new)
				response="${w}Usage: ${y}$(basename $0)${d} ${g}${arg}${d}"
				;;
				add-disk)
				response="${w}Usage: ${y}$(basename $0)${d} ${g}${arg}${d} ${w}${u}desktop${d}${r}|${d}${w}${u}server${d}${r}|${d}${w}${u}guest${d}"
				;;
				*)
					helpCmd
				;;
		esac
		echo -e ${response}
	fi
}

function addDisk(){
	mv=$1
	diskLetter=$(tr -cd '[:lower:]' < /dev/urandom | fold -w1 | head -n1)
	disco="$mv-san-$diskLetter.img"
	xml="${xml_storage}$mv-$diskLetter.xml"
	qemu-img create -f raw ${templates}/$disco 1G
	echo "<disk type='block' device='disk'>" > $xml
	echo "<driver name='qemu' type='raw' cache='none'/>">> $xml
	echo "<source dev='${templates}/$disco'/>">> $xml
	echo "<target dev='vdc' bus='virtio'/>">> $xml
	echo "</disk>">> $xml
	virsh attach-disk ${mv} ${templates}/$disco vd$diskLetter && echo "Disco  vd$diskLetter adjuntado"
}

if [[ "$action" != "" && "$machinet" != "" ]] ; then
	if [ "$action" = "reset" ] ; then
		if [ "$machinet" = "desktop" ] ; then
			resetDeskTop
		elif [ "$machinet" = "server" ] ; then
			resetServer
		elif [ "$machinet" = "guest" ] ; then
			resetGuest
		elif [ "$machinet" = "all" ] ; then
			resetDeskTop && resetServer && resetGuest
		else
			helpOption $action
		fi
	elif [ "$action" = "view" ] ; then
		if [ "$machinet" = "desktop" ] ; then
			viewDesktop
		elif [ "$machinet" = "server" ] ; then
			viewServer
		elif [[ "$machinet" = "guest" ]]; then
			viewGuest
		elif [ ! -z "$machinet" ] ; then
			helpOption $action
		fi
	elif [ "$action" = "new" ] ; then
		createNewServer
	else
		helpOption $action
	fi
elif [ "$action" = "new" ] ; then
	createNewServer
elif [[ "$action" != "" && "$machinet" = "" ]] ; then
	helpOption $action
else
	helpCmd
fi
